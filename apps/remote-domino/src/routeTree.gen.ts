/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TechStackRouteImport } from './routes/tech-stack'
import { Route as StylingRouteImport } from './routes/styling'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as RoutingRouteImport } from './routes/routing'
import { Route as RepositoryRouteImport } from './routes/repository'
import { Route as GettingStartedRouteImport } from './routes/getting-started'
import { Route as DatatableRouteImport } from './routes/datatable'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ComponentsRouteImport } from './routes/components'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardWorkflowsRouteImport } from './routes/dashboard/workflows'
import { Route as DashboardTasksRouteImport } from './routes/dashboard/tasks'
import { Route as DashboardEventsRouteImport } from './routes/dashboard/events'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const TechStackRoute = TechStackRouteImport.update({
  id: '/tech-stack',
  path: '/tech-stack',
  getParentRoute: () => rootRouteImport,
} as any)
const StylingRoute = StylingRouteImport.update({
  id: '/styling',
  path: '/styling',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const RoutingRoute = RoutingRouteImport.update({
  id: '/routing',
  path: '/routing',
  getParentRoute: () => rootRouteImport,
} as any)
const RepositoryRoute = RepositoryRouteImport.update({
  id: '/repository',
  path: '/repository',
  getParentRoute: () => rootRouteImport,
} as any)
const GettingStartedRoute = GettingStartedRouteImport.update({
  id: '/getting-started',
  path: '/getting-started',
  getParentRoute: () => rootRouteImport,
} as any)
const DatatableRoute = DatatableRouteImport.update({
  id: '/datatable',
  path: '/datatable',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsRoute = ComponentsRouteImport.update({
  id: '/components',
  path: '/components',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardWorkflowsRoute = DashboardWorkflowsRouteImport.update({
  id: '/workflows',
  path: '/workflows',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardTasksRoute = DashboardTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardEventsRoute = DashboardEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => DashboardRoute,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/components': typeof ComponentsRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/datatable': typeof DatatableRoute
  '/getting-started': typeof GettingStartedRoute
  '/repository': typeof RepositoryRoute
  '/routing': typeof RoutingRoute
  '/sign-in': typeof SignInRoute
  '/styling': typeof StylingRoute
  '/tech-stack': typeof TechStackRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/dashboard/events': typeof DashboardEventsRoute
  '/dashboard/tasks': typeof DashboardTasksRoute
  '/dashboard/workflows': typeof DashboardWorkflowsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/components': typeof ComponentsRoute
  '/datatable': typeof DatatableRoute
  '/getting-started': typeof GettingStartedRoute
  '/repository': typeof RepositoryRoute
  '/routing': typeof RoutingRoute
  '/sign-in': typeof SignInRoute
  '/styling': typeof StylingRoute
  '/tech-stack': typeof TechStackRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/dashboard/events': typeof DashboardEventsRoute
  '/dashboard/tasks': typeof DashboardTasksRoute
  '/dashboard/workflows': typeof DashboardWorkflowsRoute
  '/dashboard': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/components': typeof ComponentsRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/datatable': typeof DatatableRoute
  '/getting-started': typeof GettingStartedRoute
  '/repository': typeof RepositoryRoute
  '/routing': typeof RoutingRoute
  '/sign-in': typeof SignInRoute
  '/styling': typeof StylingRoute
  '/tech-stack': typeof TechStackRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/dashboard/events': typeof DashboardEventsRoute
  '/dashboard/tasks': typeof DashboardTasksRoute
  '/dashboard/workflows': typeof DashboardWorkflowsRoute
  '/dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/components'
    | '/dashboard'
    | '/datatable'
    | '/getting-started'
    | '/repository'
    | '/routing'
    | '/sign-in'
    | '/styling'
    | '/tech-stack'
    | '/auth/callback'
    | '/dashboard/events'
    | '/dashboard/tasks'
    | '/dashboard/workflows'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/components'
    | '/datatable'
    | '/getting-started'
    | '/repository'
    | '/routing'
    | '/sign-in'
    | '/styling'
    | '/tech-stack'
    | '/auth/callback'
    | '/dashboard/events'
    | '/dashboard/tasks'
    | '/dashboard/workflows'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/components'
    | '/dashboard'
    | '/datatable'
    | '/getting-started'
    | '/repository'
    | '/routing'
    | '/sign-in'
    | '/styling'
    | '/tech-stack'
    | '/auth/callback'
    | '/dashboard/events'
    | '/dashboard/tasks'
    | '/dashboard/workflows'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComponentsRoute: typeof ComponentsRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  DatatableRoute: typeof DatatableRoute
  GettingStartedRoute: typeof GettingStartedRoute
  RepositoryRoute: typeof RepositoryRoute
  RoutingRoute: typeof RoutingRoute
  SignInRoute: typeof SignInRoute
  StylingRoute: typeof StylingRoute
  TechStackRoute: typeof TechStackRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tech-stack': {
      id: '/tech-stack'
      path: '/tech-stack'
      fullPath: '/tech-stack'
      preLoaderRoute: typeof TechStackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/styling': {
      id: '/styling'
      path: '/styling'
      fullPath: '/styling'
      preLoaderRoute: typeof StylingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/routing': {
      id: '/routing'
      path: '/routing'
      fullPath: '/routing'
      preLoaderRoute: typeof RoutingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/repository': {
      id: '/repository'
      path: '/repository'
      fullPath: '/repository'
      preLoaderRoute: typeof RepositoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/getting-started': {
      id: '/getting-started'
      path: '/getting-started'
      fullPath: '/getting-started'
      preLoaderRoute: typeof GettingStartedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datatable': {
      id: '/datatable'
      path: '/datatable'
      fullPath: '/datatable'
      preLoaderRoute: typeof DatatableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components': {
      id: '/components'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof ComponentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/workflows': {
      id: '/dashboard/workflows'
      path: '/workflows'
      fullPath: '/dashboard/workflows'
      preLoaderRoute: typeof DashboardWorkflowsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/tasks': {
      id: '/dashboard/tasks'
      path: '/tasks'
      fullPath: '/dashboard/tasks'
      preLoaderRoute: typeof DashboardTasksRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/events': {
      id: '/dashboard/events'
      path: '/events'
      fullPath: '/dashboard/events'
      preLoaderRoute: typeof DashboardEventsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface DashboardRouteChildren {
  DashboardEventsRoute: typeof DashboardEventsRoute
  DashboardTasksRoute: typeof DashboardTasksRoute
  DashboardWorkflowsRoute: typeof DashboardWorkflowsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardEventsRoute: DashboardEventsRoute,
  DashboardTasksRoute: DashboardTasksRoute,
  DashboardWorkflowsRoute: DashboardWorkflowsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComponentsRoute: ComponentsRoute,
  DashboardRoute: DashboardRouteWithChildren,
  DatatableRoute: DatatableRoute,
  GettingStartedRoute: GettingStartedRoute,
  RepositoryRoute: RepositoryRoute,
  RoutingRoute: RoutingRoute,
  SignInRoute: SignInRoute,
  StylingRoute: StylingRoute,
  TechStackRoute: TechStackRoute,
  AuthCallbackRoute: AuthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
