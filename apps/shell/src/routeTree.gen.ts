/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AppsModuleNameRouteImport } from './routes/apps.$moduleName'
import { Route as AppsModuleNameSplatRouteImport } from './routes/apps.$moduleName.$'

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AppsModuleNameRoute = AppsModuleNameRouteImport.update({
  id: '/apps/$moduleName',
  path: '/apps/$moduleName',
  getParentRoute: () => rootRouteImport,
} as any)
const AppsModuleNameSplatRoute = AppsModuleNameSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => AppsModuleNameRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/apps/$moduleName': typeof AppsModuleNameRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/apps/$moduleName/$': typeof AppsModuleNameSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/apps/$moduleName': typeof AppsModuleNameRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/apps/$moduleName/$': typeof AppsModuleNameSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/apps/$moduleName': typeof AppsModuleNameRouteWithChildren
  '/auth/callback': typeof AuthCallbackRoute
  '/apps/$moduleName/$': typeof AppsModuleNameSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/apps/$moduleName'
    | '/auth/callback'
    | '/apps/$moduleName/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/apps/$moduleName'
    | '/auth/callback'
    | '/apps/$moduleName/$'
  id:
    | '__root__'
    | '/'
    | '/sign-in'
    | '/apps/$moduleName'
    | '/auth/callback'
    | '/apps/$moduleName/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignInRoute: typeof SignInRoute
  AppsModuleNameRoute: typeof AppsModuleNameRouteWithChildren
  AuthCallbackRoute: typeof AuthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/apps/$moduleName': {
      id: '/apps/$moduleName'
      path: '/apps/$moduleName'
      fullPath: '/apps/$moduleName'
      preLoaderRoute: typeof AppsModuleNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/apps/$moduleName/$': {
      id: '/apps/$moduleName/$'
      path: '/$'
      fullPath: '/apps/$moduleName/$'
      preLoaderRoute: typeof AppsModuleNameSplatRouteImport
      parentRoute: typeof AppsModuleNameRoute
    }
  }
}

interface AppsModuleNameRouteChildren {
  AppsModuleNameSplatRoute: typeof AppsModuleNameSplatRoute
}

const AppsModuleNameRouteChildren: AppsModuleNameRouteChildren = {
  AppsModuleNameSplatRoute: AppsModuleNameSplatRoute,
}

const AppsModuleNameRouteWithChildren = AppsModuleNameRoute._addFileChildren(
  AppsModuleNameRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignInRoute: SignInRoute,
  AppsModuleNameRoute: AppsModuleNameRouteWithChildren,
  AuthCallbackRoute: AuthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
